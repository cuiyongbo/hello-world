Section 6.4 - Double Hashing
============================

Both pseudo-random probing and quadratic probing eliminate **primary clustering**, which is the name given to the the situation when keys share substantial segments of a probe sequence. If two keys hash to the same home position, however, then they will always follow the same probe sequence for every collision resolution method that we have seen so far. The probe sequences generated by pseudo-random and quadratic probing are entirely a function of the home position, not the original key value. This is because function *probe* ignores its input parameter K for these collision resolution methods. If the hash function generates a cluster at a particular home position, then the cluster remains under pseudo-random and quadratic probing. This problem is called **secondary clustering**.

To avoid secondary clustering, we need to have the probe sequence make use of the original key value in its decision-making process. A simple technique for doing this is to return to linear probing by a constant step size for the probe function, but to have that constant be determined by a second hash function, ``hash2``. Thus, the probe sequence would be of the form ``probe(K, i) = i * hash2(K)``. This method is called **double hashing**.

A good implementation of double hashing should ensure that all of the probe sequence constants are relatively prime to the table size M. This can be achieved easily. One way is to select M to be a prime number, and have *hash2* return a value in the range *1 <= hash2(K) <= M-1*. Another way is to set :math:`M = 2^m` for some value m and have *hash2* return an odd value between 1 and :math:`2^m`.