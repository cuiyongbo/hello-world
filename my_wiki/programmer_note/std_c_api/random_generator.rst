****************
Random generator
****************

#. Bad random generator

   .. code-block:: c

      #include <stdlib.h>
      int rand(void);
      int rand_r(unsigned *seed);
      void srand(unsigned seed);
      void sranddev(void);

   These interfaces are obsoleted by **arc4random(3).**

   The *rand()* function computes a sequence of pseudo-random integers 
   in the range of 0 to ``RAND_MAX`` (as defined in **stdlib.h**).

   The *srand()* function sets its argument *seed* as the seed 
   for a new sequence of pseudo-random numbers to be returned by *rand()*.
   These sequences are repeatable by calling *srand()* with the same seed value.

   If no seed value is provided, the functions are automatically seeded with a value of 1.

   The *sranddev()* function initializes a seed, using the **random(4)** random number device 
   which returns good random numbers. However, the *rand()* function still remains unsuitable 
   for cryptographic use.

   The *rand_r()* function provides the same functionality as *rand().*  
   A pointer to the *context* value seed must be supplied by the caller.

#. better random number generator

   .. code-block:: c

      #include <stdlib.h>

      long random(void);
      void srandom(unsigned seed);

   The *random()* function uses a non-linear, additive feedback, random number generator, 
   employing a default table of size 31 long integers. It returns successive pseudo-random numbers 
   in the range ``from 0 to (2**31)-1.`` The period of this random number generator is very large, 
   approximately **16*((2**31)-1).**

   The *random()* and *srandom()* functions have (almost) the same calling sequence and initialization 
   properties as the *rand()* and *srand()* functions. The difference is that *rand()* produces a much 
   less random sequence -- in fact, the low dozen bits generated by *rand()* go through a cyclic pattern.  
   All of the bits generated by *random()* are usable. For example, ``random()&01`` will produce a random 
   binary value.

   Like *srand(3),* *srandom()* sets the initial seed value for future calls to *random().*  
   Like *rand(3),* *random()* will by default produce a sequence of numbers that can be 
   duplicated by calling *srandom()* with the same seed.

#. Randomly permuting arrays
   
   .. code-block:: none
      :caption: Take from *An introduction to algorithms*

      Permute-by-sort(A)
         n = A.length
         let P[1, n] be a new array
         for i=1 to n
            P[i] = Random(1, n^3)
         sort A, Using P as sorting keys

      Randomize-in-place(A)
         n = A.length
         for i=1 to n
            swap(A[i], A[Random(i, n)])

.. rubric:: Footnotes

.. [#] `Monte Carlo method <https://en.wikipedia.org/wiki/Monte_Carlo_method>`_
.. [#] `Monte Carlo algorithm <https://en.wikipedia.org/wiki/Monte_Carlo_algorithm>`_
